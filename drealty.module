<?php

define('OFFSET', 268435456);
define('RADIUS', 85445659.4471); /* $offset / pi() */

function drealty_entity_info() {
  return array(
      'drealty_listings' => array(
          'label' => t('dRealty Listing'),
          'entity class' => 'DrealtyListing',
          'controller class' => 'DrealtyLIstingController',
          'base table' => 'drealty_listings',
          'uri callback' => 'entity_class_uri',
          'fieldable' => TRUE,
          'view modes' => array(
              'full' => array(
                  'label' => 'Full View',
                  'custom settings' => FALSE,
              ),
              'search' => array(
                  'label' => 'Search View',
                  'custom settings' => TRUE,
              ),
              'list' => array(
                  'label' => 'List View',
                  'custom settings' => TRUE,
              ),
          ),
          'bundles' => array(
              'drealty_listings' => array(
                  'label' => t('dRealty Listing'),
                  'admin' => array(
                      'path' => 'admin/drealty/settings',
                      'access arguments' => array('administer content'),
                  ),
              ),
          ),
          'entity keys' => array(
              'id' => 'id',
              'label' => 'name',
          ),
          'admin ui' => array(
              'path' => 'admin/content/listings',
              'file' => 'drealty_listings.admin.inc',
              'controller class' => 'DrealtyListingsUIController',
              'menu wildcard' => '%drealty_listings',
          ),
          'module' => 'drealty',
          'access callback' => 'drealty_connection_entity_access',
      ),
      'drealty_connection_entity' => array(
          'label' => t('dRealty Connection'),
          'entity class' => 'dRealtyConnectionEntity',
          'controller class' => 'dRealtyConnectionEntityContoller',
          'exportable' => TRUE,
          'fieldable' => FALSE,
          'base table' => 'drealty_connections',
          'entity keys' => array(
              'id' => 'conid',
              'label' => 'name',
              'name' => 'name'
          ),
          'module' => 'drealty',
          'access callback' => 'drealty_connection_entity_access',
          'admin ui' => array(
              'path' => 'admin/drealty/connections',
              'file' => 'drealty_connection.admin.inc',
              'controller class' => 'DrealtyConnectionUIController',
          ),
      ),
  );
}

function drealty_connection_entity_access($op, $type = NULL, $account = NULL) {
  return TRUE;
}

function drealty_menu() {
  $items = array();
  $items['admin/drealty'] = array(
      'title' => 'dRealty',
      'description' => 'Add edit and update connections.',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file path' => drupal_get_path('module', 'system'),
      'file' => 'system.admin.inc',
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/drealty/settings'] = array(
      'title' => 'dRealty Settings',
      'description' => t('Configuration settings for dRealty'),
      'access arguments' => array('access administration pages'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drealty_settings_form'),
      'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/drealty/settings/config'] = array(
      'title' => 'dRealty Settings',
      'description' => t('Configuration settings for dRealty'),
      'access arguments' => array('access administration pages'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drealty_settings_form'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/drealty/fields_autocomplete/%/%/%'] = array(
      'title' => 'Autocomplete for fields',
      'page callback' => '_fields_autocomplete',
      'page arguments' => array(3, 4, 5),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK
  );

  $items['listings/map'] = array(
      'title' => 'Search Map',
      'page callback' => 'drealty_listings_map',
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
  );

  $items['drealty/js/map'] = array(
      'page callback' => 'drealty_listings_map_get_listings',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  return $items;
}

function drealty_listings_map() {
  $listings = entity_load('drealty_listings');
  drupal_add_js('http://maps.googleapis.com/maps/api/js?sensor=false', array('type' => 'external'));
  $module_path = drupal_get_path('module', 'drealty');
  drupal_add_js($module_path . '/js/drealty.search.map.js', array('type' => 'file'));
  return theme('drealty_search_map', $listings);
}

function drealty_listings_map_get_listings() {

  $bb = $_REQUEST['bounding_box'];

  $lat_condition = $bb['south_west']['lat'] . ' AND ' . $bb['north_east']['lat'];
  $lon_condition = $bb['south_west']['lng'] . ' AND ' . $bb['north_east']['lng'];

  $markers = db_select('drealty_listings', 'l')
    ->fields('l', array('latitude', 'longitude', 'id', 'listing_id'))
    ->where("(latitude BETWEEN $lat_condition) AND (longitude BETWEEN $lon_condition)")
    ->execute()
    ->fetchAllAssoc('listing_id');


  $clustered = array();

  while (count($markers)) {
    $marker = array_pop($markers);
    $cluster = array();
    foreach ($markers as $key => $target) {
      $pixels = pixelDistance($marker->latitude, $marker->longitude, $target->latitude, $target->longitude, $bb['zoom']);
      if ($bb['distance'] > $pixels) {
        unset($markers[$key]);
        $cluster[] = $target;
      }
    }

    if (count($cluster) > 0) {
      $cluster[] = $marker;
      $data['count'] = count($cluster) + 1;
      $data['center']['lat'] = $marker->latitude;
      $data['center']['lng'] = $marker->longitude;
      $data['markers'] = $cluster;
      $clustered[] = $data;
    } else {
      $cluster[] = $marker;
      $data['count'] = 1;
      $data['center']['lat'] = $marker->latitude;
      $data['center']['lng'] = $marker->longitude;
      $data['markers'] = $cluster;
      $clustered[] = $data;
    }
  }

  print drupal_json_encode($clustered);
  exit();
}

function lonToX($lon) {
  return round(OFFSET + RADIUS * $lon * pi() / 180);
}

function latToY($lat) {
  return round(OFFSET - RADIUS *
      log((1 + sin($lat * pi() / 180)) /
        (1 - sin($lat * pi() / 180))) / 2);
}

function pixelDistance($lat1, $lon1, $lat2, $lon2, $zoom) {
  $x1 = lonToX($lon1);
  $y1 = latToY($lat1);

  $x2 = lonToX($lon2);
  $y2 = latToY($lat2);

  return sqrt(pow(($x1 - $x2), 2) + pow(($y1 - $y2), 2)) >> (21 - $zoom);
}

function drealty_class_load($cid) {
  $dr = new drealtyResources();
  return $dr->FetchClass($cid);
}

function _fields_autocomplete($conid, $class, $string) {
  if ($conid == NULL) {
    exit();
  }

  $matches = array();
  //$result = db_query("SELECT * FROM {drealty_fields} WHERE conid = :conid AND resource = :resource AND display = 1", array(':conid' => $conid, ':resource' => $resource))->fetchAll();
  //$result = db_query("SELECT fid, systemname, longname FROM {drealty_fields} WHERE LOWER(longname) LIKE LOWER(:pattern) AND conid = :conid", array('::pattern' => db_like($string), ':conid' => $conid));
  $ored = db_or();
  $ored
    ->condition('systemname', '%' . strtolower($string) . '%', 'LIKE')
    ->condition('longname', '%' . strtolower($string) . '%', 'LIKE');

  $anded = db_and();
  $anded
    ->condition('conid', $conid)
    ->condition('classes', '%' . $class . '%', 'LIKE');

  $results = db_select('drealty_fields', 'f')
    ->fields('f')
    ->condition($anded)
    ->condition($ored)
    ->execute()
    ->fetchAll();

  foreach ($results as $data) {
    $matches[$data->systemname . ' - ' . $data->longname] = $data->systemname . ' - ' . $data->longname;
  }
  print drupal_json_encode($matches);
  //print drupal_to_js($matches);
  exit();
}

function drealty_geocode($address) {


  $address = str_replace(" ", "+", $address);
  $url = "http://open.mapquestapi.com/nominatim/v1/search?format=json&exclude_place_ids=&accept-language=en-us,en;q=0.5&polygon=1&addressdetails=1&q=$address";
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $buffer = curl_exec($ch);
  curl_close($ch);
  $result = json_decode($buffer);

  $latlon = new stdClass();
  $latlon->success = FALSE;

  if (isset($result[0])) {
    $latlon->lat = $result[0]->lat;
    $latlon->lon = $result[0]->lon;
    $latlon->success = TRUE;
  } else {
    $geometry = geocode('google', $address);
    if (isset($geometry)) {
      $centroid = $geometry->getCentroid();
      $latlon->lat = $centroid->getY();
      $latlon->lon = $centroid->getX();
      $latlon->success = TRUE;
    }
  }
  return $latlon;
}

function drealty_settings_form($form, &$form_state) {
  $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Connection Name'),
      '#description' => t('Name to identify the connection in the administration pages.'),
      '#required' => TRUE,
      '#size' => 80,
  );
  return $form;
}

function drealty_connection_entity_save(dRealtyConnectionEntity $connection) {
  return $connection->save();
}

function drealty_help($path, $arg) {
  switch ($path) {
    case "admin/help#drealty":
      return '<p>' . t("RETS enabled Real Estate IDX solution for Drupal.") . '</p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function drealty_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
      'administer connections' => array(
          'title' => t('Administer model types'),
          'description' => t('Create and delete fields for model types, and set their permissions.'),
      ),
      'administer listings' => array(
          'title' => t('Administer models'),
          'description' => t('Edit and delete all models'),
      ),
  );

  return $permissions;
}

/**
 * Determines whether the given user has access to a model.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $model
 *   Optionally a model or a model type to check access for. If nothing is
 *   given, access for all models is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function drealty_listing_access($op, $listing = NULL, $account = NULL) {
  return TRUE;
}

/**
 * Implements hook_title_callback().
 *
 * @param string $resource_type
 * @param int $conid
 * @return none
 */
function drealty_resource_title_callback($resource_type, $conid) {
  $dc = new drealtyConnection();
  $connections = $dc->FetchConnections();
  $connection_name = $connections[$conid]->name;
  return t('@connection - Configure @resource Resources', array('@connection' => $connection_name, '@resource' => ucwords(str_replace("_", " ", $resource_type))));
}

/**
 * Implements hook_theme().
 */
function drealty_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['drealty_classes_form'] = array(
      'render element' => 'form',
      'file' => 'drealty_connection.admin.inc',
  );

  $themes['drealty_fields_form'] = array(
      'render element' => 'form',
      'file' => 'drealty_connection.admin.inc',
  );

  $themes['views_view_field__active'] = array(
      'template' => 'views/views-view-field--active',
      'original hook' => 'views_view',
      'preprocess functions' => array(
          'template_preprocess',
          'template_preprocess_views_view',
      ),
      'arguments' => array('view' => NULL),
  );

  $themes['drealty_listings'] = array(
      'render element' => 'elements',
      'template' => 'templates/drealty-listings',
  );

  $themes['drealty_mls_images'] = array(
      'variables' => array('mls_images', 'listing' => NULL),
      'template' => 'templates/drealty-mls-images',
  );


  $themes['drealty_search_map'] = array(
      'variables' => array('listings' => null),
      'template' => 'templates/drealty-search-map',
  );


  return $themes;
}

function drealty_listings_load($listing_mlsid, $reset = FALSE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'drealty_listings')
    ->propertyCondition('listing_id', $listing_mlsid)
    ->execute();

  return reset(entity_load('drealty_listings', array_keys($result['drealty_listings']), array(), $reset));
}

function drealty_listings_load_multiple($listing_mlsids = array(), $conditions = array(), $reset = FALSE) {
  
}

function drealty_listings_page_title(DrealtyListing $listing) {
  return $listing->name;
}

function drealty_listings_page_view($listing, $view_mode = 'full', $langcode = NULL, $page = NULL) {
  $controller = entity_get_controller('drealty_listings');
  $content = $controller->view(array($listing->id => $listing), $view_mode, $langcode, $page);

  return $content;
}

/**
 * Implements hook_views_api().
 */
function drealty_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'drealty') . '/views',
  );
}

function drealty_listings_uri(DrealtyListing $listing) {
  return array('path' => 'listings/' . $listing->id);
}

function drealty_preprocess_entity(&$variables) {
  $x = $variables;
}

function drealty_search_api_multitext_getter_callback($item, $options = array(), $name = NULL) {
  $value = explode(",", $item->{$name});
  return $value;
}

function drealty_listing_create($values = array()) {
  return entity_get_controller('drealty_listings')->create($values);
}

class DrealtyListing extends Entity {

  public function __construct(array $values = array()) {
    parent::__construct($values, 'drealty_listings');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'listings/' . $this->id);
  }

}

class DrealtyLIstingController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);

    foreach ($entity as $key => $value) {
      $content[$key] = array(
          '#value' => $value,
          '#markup' => empty($value) ? NULL : "<div><div class='field-label'><strong>$key</strong></div><div class='field-value'>$value</div></div>",
      );
    }
    return $content;
  }

  public function attachLoad(&$queried_entities, $revision_id = FALSE) {
    parent::attachLoad($queried_entities, $revision_id);

    foreach ($queried_entities as $entity) {
      $fids = db_select('file_usage', 'f')
        ->fields('f', array('fid'))
        ->condition('id', $entity->id)
        ->execute()
        ->fetchAllKeyed();
      $fids = array_keys($fids);
      $files = file_load_multiple($fids);
      $entity->mls_images = $files;
    }
  }

  public function create(array $values = array()) {
    $listing = parent::create($values);
    return $listing;
  }

}